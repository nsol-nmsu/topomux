class Topology (object):
        """
        A topology is a set of Nodes with Edges between them. This particular
        Topology class is extended to support the association of sets of
        labels and prefixes with each node, and a label to each edge.
        """

        class Node (object):
                """
                A Node within this Topology. Nodes may have a name, a set of
                labels, and a set of prefixes.
                
                Note that because Python treats nested classes as instance
                members, each Topology has its own Node class. Therefore, we may
                use the class property nodeSet to refer to the nodes within a
                particular Topology. 
                """
                
                nodeSet = set()
                
                def __init__(self, name=None, labels=[], prefixes=[]):
                        """
                        Constructor for a Node. If name is None, the name
                        will be generated by counting the number of nodes in the
                        nodeSet.
                        """
                        
                        if name == None:
                                name = "n%d" % len(self.__class__.nodeSet)
                        self.name = name
                        self.labels = set(labels)
                        self.prefixes = set(prefixes)
                        self.edges = set([])
                        self.__class__.nodeSet |= set([self])
                
                def addLabel(self, label):
                        """ Adds a label to this Node's label set
                        """
                        self.labels |= set([label])
                
                def addPrefix(self, prefix):
                        """ Adds a prefix to this Node's prefix set
                        """
                        self.prefixes |= set([prefix])
                
                def getNeighbors(self, filter=None):
                        """ Returns a set containing the neighbors of this node
                        """
                        ret = set()
                        for edge in self.edges:
                                if filter == None or edge.label in filter:
                                        ret |= set([x for x in list(edge.pair) if x != self])
                        return ret
                
                def __str__(self):
                        """ Returns the name of the node
                        """
                        return self.name
                
                def __repr__(self):
                        """ Returns the name of the node
                        """
                        return self.__str__()
                
                @classmethod
                def get(cls, name):
                        """ Returns the node with the given name
                        """
                        return [x for x in cls.nodeSet if x.name == name][0]
        
        class Edge (object):
                """
                An Edge within this Topology. Edges have a capacity and delay, 
                and may have a label which classifies the edge.
                
                Note that because Python treats nested classes as instance
                members, each Topology has its own Edge class. Therefore, we may
                use the class property edgeSet to refer to the edges within a
                particular Topology. 
                """
                
                edgeSet = set()
                
                def __init__(self, a, b, capacity=1000.0, delay=2.0, label=None):
                        """ Constructor
                        """
                        self.pair = set([a, b])
                        self.capacity = capacity
                        self.delay = delay
                        self.label = label
                        a.edges |= set([self])
                        b.edges |= set([self])
                        self.__class__.edgeSet |= set([self])
                
                @classmethod
                def get(cls, a, b):
                        """ Returns the edge between nodes a and b, if it exists
                        """
                        return [x for x in cls.nodeSet if x.pair == set([a, b])][0]

        def __init__(self):
                """ Constructor
                """    
                pass
        
        def findNode(self, name):
                """ Returns the node with the given name
                """
                return self.Node.get(name)
        
        def addEdge(self, a, b, **kwargs):
                """ Adds an edge between two Nodes. See the constructor of
                    Topology.Edge for details about the kwargs.
                """
                return self.Edge(a, b, **kwargs)
        
        def addNode(self, **kwargs):
                """ Adds a node to the graph. See the constructor of
                    Topology.Node for details about the kwargs.
                """
                return self.Node(**kwargs)
        
        def labelAllNodes(self, label):
                """ Adds the label to all nodes
                """
                for n in self.Node.nodeSet:
                        n.addLabel(label)
        
        def prefixAllNodes(self, prefix):
                """ Adds the prefix to all nodes
                """
                for n in self.Node.nodeSet:
                        n.addPrefix(prefix)
                
        def labelAllEdges(self, label):
                """ Assigns the label to all edges
                """
                for e in self.Edge.edgeSet:
                        e.label = label
        
        def getPrefixes(self):
                """ Returns all prefixes served by nodes within the graph
                """
                ret = set()
                for n in self.Node.nodeSet:
                        ret |= n.prefixes
                return ret
                
        def getNodes(self):
                """ Returns the nodeSet of this graph
                """
                return self.Node.nodeSet
        
def ImportedTopology (Topology):
        """ Used to import topologies from FNSS or NetworkX. Simply copies
            the nodes and edges; does not import the data of nodes or
            edges.
        """
        
        def __init__(self, topo):
                """ Constructor.
                    topo should be a NetworkX Graph object, or some other
                    object with compatible nodes_iter and edges_iter methods
                """
                super(self, Topology).__init__()
                self._import_from(topo)
                
        def _import_from(self, topo):
                """ Imports the nodes and edges from the topo
                """
                nodemap = {}
                for node, data in topo.nodes_iter(True):
                        nodemap[node] = self.addNode("n%d" % node)
                for u, v, data in topo.edges_iter(None, True):
                        self.addEdge(nodemap[u], nodemap[v])
